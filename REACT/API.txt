JSON -- javascript object notation   [ common format for DATA EXCHANGE]
It is like a common language which is understandable by both programmer and server 

JSON data is written as name/value pairs, just like JavaScript object properties.
A name/value pair must be in double quotes and colon ( : ) at center
"firstName":"John"

JSON is inbuilt  javascript object   consist of two methods  ::  parse()   and  stringfy()               
JSON have parse and stringfy to convert object  to sting and vise versa   

JSON objects are written inside curly braces and can contain multiple name/value pairs:
let jsonData=  {
                  "firstName":"John", 
                  "lastName":"Doe"
                }
---------------------------------------------------------------------------------------------------------

A CALLBACK is a function passed as an argument to another function
This technique allows a function to call another function
function A(){
    console.log(sum)
 }
function B(num,num2,A){        // When you pass a function as an argument, remember not to use parenthesis.
      sum=num+num2
      A(sum)
 }
 B(5,5,A) 

 -------------------------------------------------------------------------------------------------------------

## Asynchronous here refers to all those functions in JavaScript that 
are processed in the background without blocking any other request
Functions running in parallel with other functions are called ASYNCHRONOUS
A good example is JavaScript setTimeout()

console.log(1)
setTimeout ( ()=>{           
   console.log(2)
},3000)
console.log(3)              // order of o/p will be    1  3  2 ((coz 3  do not wait for 2 to get execute first))

SYNTAX :: setInterval(CALLBACK_function , time);  
          clearInterval  use to stop setInterval       


** Asynchronus programmes are difficult to write and difficult to debug.
   Because of this, most modern asynchronous JavaScript methods don't use callbacks. 
   Instead, in JavaScript, asynchronous programming is solved using PROMISES instead.
------------------------------------------------------------------------------------------------------------------

*** Postman is an API development tool which helps to build, test and modify APIs
It is a simple Graphic User Interface for sending and viewing HTTP requests and responses.
This tool has the ability to make various types of HTTP requests like GET, POST, PUT, PATCH, 
and convert the API to code for languages like JavaScript and Python.

## API
Application Programming Interface is software that acts as an intermediary for two apps to communicate with each other. 
It is a way for two or more computer programs to communicate with each other
We use APIs whenever we use an application like Twitter, Facebook, sending text messages
Eg : Paypal , weather snippet , google map , travel booking

## HTTP
HTTP (Hypertext Transfer Protocol) is the collection of rules for the transmission of data on the World Wide Web,
like graphic images, text, video, sound, and other multimedia data. 
The Web users implicitly make use of HTTP as soon as they open their Web browser.

----------------------------------------------------------------------------------------------------------------------

*** Promise describe something that can be returnin future and till that time , promise remain in pending
Outcome can be : 1.Resolved  OR  2.Rejected  OR  3.Pending
It is a constructor function which handle asynchronous scenarios TO OVERCOME WITH NOT USING CALLBACK FUNCTION

A Promise is a JavaScript OBJECT that links "producing code"(code that can take some time) and 
"consuming code" ( code that must wait for the result )
Promise is created using new keyword 

Promise return a another promise is called promise chaining
EX : Fetch method  

##  .then -- will handle Resolved respond
     It takes two argument , Callback for Success and another for Failure

const DataInfo= new Promise((res,rej)=>{
        input=17
        if(input>=18){
            res({mess:"success",data:input})
        }else{
            rej({mess:"fail",data:"input"})
        }
    });

DataInfo.then(function(data){
    console.log(data)
}).catch(function(err){
   console.log(err)
});

##  .catch -- will give you Rejected respond

let data=new Promise((resolve,reject)=>{
   resolve(1)
   reject("error")
})
data.then(function(res){
  console.log(res)
}).catch(function(err){         // catch block execute if rejected
  console.log(err)
}).finally(function(){         // it will execute no matter resolve or reject
  console.log("i am finally")
})

-------------------------------------------------------------------------------------------------------

## AJAX -- "Asynchronous JavaScript and XML"
With Ajax, web applications can send and retrieve data from a server asynchronously (in the background)
without interfering with the display and behaviour of the existing page.
AJAX is not a programming language but a technique for accessing web servers from a web page.

*** AJAX is a technology for asynchronous execution of HTTP requests from client-side JavaScript code. 
JavaScript front-end apps use AJAX calls to access the back-end services and APIs and 
consume data from the Web server over the HTTP protocol.
To communicate with servers, it can send and receive information in various formats, including JSON, XML, HTML

## Fetch is a new native JavaScript API which request data from server.
   request can be of any type that return data in JSON or XML
   Fetch makes it easier to make web requests and handle responses than with the older XMLHttpRequest.
   Ajax code to Get data from server is complicated and hard to understand code , we use fetch function 
  Fetch take one arguments  :: URL to request and it RETURN  a promise 

fetch('send-ajax-data.php')
    .then(data => console.log(data))
    .catch (error => console.log('Error:' + error));  // chaing

## Axios is a popular promise-based 3rd party library client that has an easy-to-use API and can be used in both 
   browser and node.js, it supports the promise API

   ** npm install axios  (TO INSALL THE LIBRARY)
   import axios from "axios"
   
   It has a way to set a response timeout .    It has a way to cancel a request
   It performs automatic JSON data transformation .    It supports upload progress 
   
   SYNTAX  ::  axios.get(link)   axios.post(link)   axios.put(link)

   const getData = () =>axios.get(‘http://www.example.org/example.txt').then(
   function(response) {
   console.log(response)
   }).catch(
   function(err) {
   console.log(err);
   });
   document.getElementById(‘get-button’).addEventListener(‘click’, getData());
   The Axios request is being stored in a const getData function which can be activated on an event listener.

------------------------------------------------------------------------------------------------------------

### Fetch API uses two objects, Request and Response. This Response object holds the data sent by the API. 
   Fetch sends the Request and returns a promise, which is resolved to the Response object when the request completes. 
    If the request fails, the promise is rejected.

To get the data received in the response, you need to wait for this promise to resolve into the Response object.
One way is to use then to capture the response.

fetch(
	'https://carbonfootprint1.p.rapidapi.com/CarbonFootprintFromCarTravel?distance=100&vehicle=SmallDieselCar',
	{
		method: 'GET',
		headers: {
			'x-rapidapi-key': 'your_api_key'
		}
	}
).then(response => {
	console.log(response);
});

### Using async/await
   A better and cleaner way of handling the promise is through the async/await keywords. 
   You start by specifying the caller function as async and then use await to handle the promise.

async function getResponse() {
	const response = await fetch(
		'https://carbonfootprint1.p.rapidapi.com/CarbonFootprintFromCarTravel?distance=100&vehicle=SmallDieselCar',
		{
			method: 'GET',
			headers: {
				'x-rapidapi-host': 'carbonfootprint1.p.rapidapi.com',
				'x-rapidapi-key': 'your_api_key'
			}
		}
	);
    const data = await response.json();         // Extracting data as a JSON Object from the response
}
Because of the await keyword, the asynchronous function pauses until the promise is resolved. 
The Response object is assigned to response once the request completes.

-----------------------------------------------------------------------------------------------------------

### API’s work on the CRUD principle. CRUD stands for Create, Read, Update, and Delete. 
create a new record - “POST.” 
read a record - “GET.” 
update a record - “PUT” or “PATCH.” 
delete a record - “DELETE.”

The most commonly used API technologies are XMLHttpRequest, Ajax, FetchAPI, and Axios.




